{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Yumi\/documentation\/Yumi"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Yumi\/documentation\/Yumi\/SortedMerge"},"kind":"article","abstract":[{"type":"text","text":"Merging two "},{"type":"emphasis","inlineContent":[{"text":"sorted","type":"text"}]},{"type":"text","text":" sequences."}],"variants":[{"paths":["\/documentation\/yumi\/sortedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Yumi"}],"title":"Sorted Merge"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"The method ","type":"text"},{"type":"codeVoice","code":"sortedMerging"},{"type":"text","text":" can merge two sorted sequences:"}],"type":"paragraph"},{"syntax":"swift","code":["for x in [1, 3, 5].sortedMerging([2, 3, 4]) {","    print(x)","}","","\/\/ Prints 1","\/\/ Prints 2","\/\/ Prints 3","\/\/ Prints 3","\/\/ Prints 4","\/\/ Prints 5"],"type":"codeListing"},{"inlineContent":[{"text":"With dictionary-like sequences, it can also merge entries with the same key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let julSales = [(\"Alex\", 10), (\"Bob\", 20)]","let augSales = [(\"Bob\", 20), (\"Carl\", 30)]","","let totalSales = julSales.sortedMerging(augSales) { $0.0 < $0.1 }","  areDuplicates: { $0.0 == $1.0 }","  mergeDuplicates: { ($0.0, $0.1 + $1.1) }","","for (person, sale) in totalSales {","    print(person, sale)","}","","\/\/ Prints \"Alex\" 10","\/\/ Prints \"Bob\" 40","\/\/ Prints \"Carl\" 30"],"type":"codeListing"},{"anchor":"Parameters","type":"heading","level":3,"text":"Parameters"},{"inlineContent":[{"text":"Other than the two sequences, ","type":"text"},{"code":"sortedMerging","type":"codeVoice"},{"text":" methods take three parameters:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"areInAscendingOrder","type":"codeVoice"},{"text":", which serves as ","type":"text"},{"code":"<","type":"codeVoice"},{"text":" in a ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" implementation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areDuplicates"},{"type":"text","text":", which serves as "},{"type":"codeVoice","code":"=="},{"type":"text","text":" in an "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" implementation. If you do not want to merge any pair of elements, simply return "},{"type":"codeVoice","code":"false"},{"type":"text","text":". This is also the default implementation when no value is provided."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"mergeDuplicates"},{"type":"text","text":", which merges elements identified as duplicates by "},{"type":"codeVoice","code":"areDuplicates"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"style":"important","name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The two input sequences must be sorted with respect to the provided "},{"type":"codeVoice","code":"areInAscendingOrder"},{"type":"text","text":" for the result to be meaningful."}],"type":"paragraph"}]},{"anchor":"Variants","type":"heading","level":3,"text":"Variants"},{"inlineContent":[{"type":"text","text":"There are an eager version and a lazy version. The former takes non-escaping throwing closures, whereas the latter takes escaping non-throwing ones. You might be forced to use one of the two, given these constraints. If not, you can use "},{"type":"codeVoice","code":".lazy"},{"type":"text","text":" to use the lazy version."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If your sequenceâ€™s element type conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":", there is also a shortcut version that does not merge duplicates. It orders elements by "},{"type":"codeVoice","code":"<"},{"type":"text","text":", and returns a sequence that produces elements lazily."}],"type":"paragraph"}]}],"references":{"doc://Yumi/documentation/Yumi":{"kind":"symbol","role":"collection","type":"topic","title":"Yumi","identifier":"doc:\/\/Yumi\/documentation\/Yumi","url":"\/documentation\/yumi","abstract":[{"text":"Some commonly used functionality.","type":"text"}]}}}